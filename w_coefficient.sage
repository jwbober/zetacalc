import sys

def write_w_coefficient_file(limit):
    outfile = open("w_coefficient.h", 'w')
    outfile.write( """
        // 
        // This file was automatically generated by a sage script,
        // which should be in the file w_coefficient.sage, and it
        // probably should not be edited manually. Instead, edit
        // that file, and rerun the script.
        //
        // To run the script, you can, for example, run sage from
        // the command line, attach the file w_coefficient.sage,
        // and then run the function write_w_coefficient_file(limit)
        // with limit equal to the one more than the largest j you
        // wish these coefficients to be precomputed with.
        //
    """)
    print_A(limit, outfile)
    print_B(limit, outfile)
    outfile.close()

def print_A(limit, outfile):
    write = outfile.write
    R1 = ComplexField(100)
    R2 = RealField(53)
    write("const int A_range = %s;\n" % limit.str());
    write("Complex A[%s][%s] = {" % (limit.str(), limit.str()))
    for s in srange(limit):
        write("{")
        for j in srange(limit):
            if s > j:
                write("Complex(0.0,0.0)")
            else:
                z = R1(A(s, j))
                write("Complex(%s,%s)" % (R2(real(z)).str(truncate=False), R2(imag(z)).str(truncate=False)))
            if j < limit - 1:
                write(",\n")
        write("}")
        if s < limit - 1:
            write(",\n")
    write("};\n")

def print_B(limit, outfile):
    write = outfile.write
    R1 = ComplexField(100)
    R2 = RealField(53)
    write("const int B_range = %s;\n" % limit.str());
    write("Complex B[%s][%s][%s] = {" % (limit.str(), limit.str(), limit.str()))
    for s in srange(limit):
        write("{")
        for j in srange(limit):
            write("{")
            for l in srange(limit):
                z = R1(B(s, j, l))
                if(z == 0):
                    write("Complex(0.0,0.0)")
                else:
                    write("Complex(%s,%s)" % (R2(real(z)).str(truncate=False), R2(imag(z)).str(truncate=False)))
                if l < limit - 1:
                    write(",\n")
            write("}")
            if j < limit - 1:
                write(",\n")

        write("}")
        if s < limit - 1:
            write(",\n")
    write("};\n")


def A(s, j):
    return                                      \
       pow(pi, -(j + 1)/2)                      \
       * pow(2 * pi, s/2)                        \
       * pow(2, -3 * j/2 - 1)                   \
       * factorial(j)                           \
       * sqrt(2 * pi)                           \
       * exp(pi * i / 4 + (j - s) * 3 * pi * i / 4)    \
       / factorial(s)


def B(s, j, l):
    if(l > j - s):
        return 0
    if is_even(j - s - l):
        if is_even( (j + l - s)/2 ):
            sign = 1
        else:
            sign = -1
        return  sign *                  \
            pow(2 * pi, l/2) *          \
            exp(-3 * pi * i * l/4) /    \
            ( factorial(l) * factorial( (j - s - l)/2 ) );
    else:
        return 0
