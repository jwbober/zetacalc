#include <iostream>
const int factorial_table_range = 100;
const Double factorial_table[factorial_table_range] = {
1.0000000000000000000000000000000,
1.0000000000000000000000000000000,
2.0000000000000000000000000000000,
6.0000000000000000000000000000000,
24.000000000000000000000000000000,
120.00000000000000000000000000000,
720.00000000000000000000000000000,
5040.0000000000000000000000000000,
40320.000000000000000000000000000,
362880.00000000000000000000000000,
3.6288000000000000000000000000000e6,
3.9916800000000000000000000000000e7,
4.7900160000000000000000000000000e8,
6.2270208000000000000000000000000e9,
8.7178291200000000000000000000000e10,
1.3076743680000000000000000000000e12,
2.0922789888000000000000000000000e13,
3.5568742809600000000000000000000e14,
6.4023737057280000000000000000000e15,
1.2164510040883200000000000000000e17,
2.4329020081766400000000000000000e18,
5.1090942171709440000000000000000e19,
1.1240007277776076800000000000000e21,
2.5852016738884976640000000000000e22,
6.2044840173323943936000000000000e23,
1.5511210043330985984000000000000e25,
4.0329146112660563558400000000000e26,
1.0888869450418352160768000000000e28,
3.0488834461171386050150400000000e29,
8.8417619937397019545436160000000e30,
2.6525285981219105863630848000000e32,
8.2228386541779228177255628800000e33,
2.6313083693369353016721801216000e35,
8.6833176188118864955181944012800e36,
2.9523279903960414084761860964352e38,
1.0333147966386144929666651337519e40,
3.7199332678990121746799944815096e41,
1.3763753091226345046315979581581e43,
5.2302261746660111176000722410008e44,
2.0397882081197443358640281739905e46,
8.1591528324789773434561126959619e47,
3.3452526613163807108170062053425e49,
1.4050061177528798985431426062440e51,
6.0415263063373835637355132068512e52,
2.6582715747884487680436258110139e54,
1.1962222086548019456196316149568e56,
5.5026221598120889498503054288023e57,
2.5862324151116818064296435515347e59,
1.2413915592536072670862289047371e61,
6.0828186403426756087225216332105e62,
3.0414093201713378043612608166080e64,
1.5511187532873822802242430164692e66,
8.0658175170943878571660636856428e67,
4.2748832840600255642980137533881e69,
2.3084369733924138047209274268298e71,
1.2696403353658275925965100847570e73,
7.1099858780486345185404564746385e74,
4.0526919504877216755680601905446e76,
2.3505613312828785718294749105160e78,
1.3868311854568983573793901972035e80,
8.3209871127413901442763411832210e81,
5.0758021387722479880085681217682e83,
3.1469973260387937525653122354961e85,
1.9826083154044400641161467083624e87,
1.2688693218588416410343338933519e89,
8.2476505920824706667231703067830e90,
5.4434493907744306400372924024770e92,
3.6471110918188685288249859096607e94,
2.4800355424368305996009904185683e96,
1.7112245242814131137246833888131e98,
1.1978571669969891796072783721687e100,
8.5047858856786231752116764423982e101,
6.1234458376886086861524070385274e103,
4.4701154615126843408912571381248e105,
3.3078854415193864122595302822135e107,
2.4809140811395398091946477116602e109,
1.8854947016660502549879322608604e111,
1.4518309202828586963407078408634e113,
1.1324281178206297831457521158725e115,
8.9461821307829752868514417153999e116,
7.1569457046263802294811533723167e118,
5.7971260207473679858797342315813e120,
4.7536433370128417484213820698965e122,
3.9455239697206586511897471180121e124,
3.3142401345653532669993875791313e126,
2.8171041143805502769494794422610e128,
2.4227095383672732381765523203454e130,
2.1077572983795277172136005187004e132,
1.8548264225739843911479684564562e134,
1.6507955160908461081216919262450e136,
1.4857159644817614973095227336211e138,
1.3520015276784029625516656875951e140,
1.2438414054641307255475324325866e142,
1.1567725070816415747592051623067e144,
1.0873661566567430802736528525677e146,
1.0329978488239059262599702099391e148,
9.9167793487094968920957140154221e149,
9.6192759682482119853328425949570e151,
9.4268904488832477456261857430623e153,
9.3326215443944152681699238856218e155};


inline Double factorial(int n) {
    if(n < factorial_table_range) {
        return factorial_table[n];
    }
    else {
        std::cout << "Warning: the factorial table wasn't large enough. factorial(n) called with n=" << n << std::endl;
        Double S = factorial_table[factorial_table_range - 1];
        for(int i = factorial_table_range; i <= n; i++) {
            S = S * i;
        }
        return S;
    }
}

inline Double binomial_coefficient(int n, int k) {
    return factorial(n)/(factorial(k) * factorial(n - k) );
}
const int bernoulli_range = 100;
const Double bernoulli_table[bernoulli_range] = {
1.0000000000000000000000000000000,
-0.50000000000000000000000000000000,
0.16666666666666666666666666666673,
0.00000000000000000000000000000000,
-0.033333333333333333333333333333356,
0.00000000000000000000000000000000,
0.023809523809523809523809523809519,
0.00000000000000000000000000000000,
-0.033333333333333333333333333333356,
0.00000000000000000000000000000000,
0.075757575757575757575757575757615,
0.00000000000000000000000000000000,
-0.25311355311355311355311355311351,
0.00000000000000000000000000000000,
1.1666666666666666666666666666661,
0.00000000000000000000000000000000,
-7.0921568627450980392156862745086,
0.00000000000000000000000000000000,
54.971177944862155388471177944885,
0.00000000000000000000000000000000,
-529.12424242424242424242424242406,
0.00000000000000000000000000000000,
6192.1231884057971014492753623201,
0.00000000000000000000000000000000,
-86580.253113553113553113553113514,
0.00000000000000000000000000000000,
1.4255171666666666666666666666661e6,
0.00000000000000000000000000000000,
-2.7298231067816091954022988505743e7,
0.00000000000000000000000000000000,
6.0158087390064236838430386817462e8,
0.00000000000000000000000000000000,
-1.5116315767092156862745098039211e10,
0.00000000000000000000000000000000,
4.2961464306116666666666666666652e11,
0.00000000000000000000000000000000,
-1.3711655205088332772159087948563e13,
0.00000000000000000000000000000000,
4.8833231897359316666666666666652e14,
0.00000000000000000000000000000000,
-1.9296579341940068148632668144870e16,
0.00000000000000000000000000000000,
8.4169304757368261500055370985592e17,
0.00000000000000000000000000000000,
-4.0338071854059455413076811594190e19,
0.00000000000000000000000000000000,
2.1150748638081991605601453900710e21,
0.00000000000000000000000000000000,
-1.2086626522296525934602731193709e23,
0.00000000000000000000000000000000,
7.5008667460769643668557200757599e24,
0.00000000000000000000000000000000,
-5.0387781014810689141378930305225e26,
0.00000000000000000000000000000000,
3.6528776484818123335110430842969e28,
0.00000000000000000000000000000000,
-2.8498769302450882226269146432920e30,
0.00000000000000000000000000000000,
2.3865427499683627644645981919232e32,
0.00000000000000000000000000000000,
-2.1399949257225333665810744765186e34,
0.00000000000000000000000000000000,
2.0500975723478097569921733095682e36,
0.00000000000000000000000000000000,
-2.0938005911346378409095185290038e38,
0.00000000000000000000000000000000,
2.2752696488463515559649260352770e40,
0.00000000000000000000000000000000,
-2.6257710286239576047303049736156e42,
0.00000000000000000000000000000000,
3.2125082102718032518204792304265e44,
0.00000000000000000000000000000000,
-4.1598278166794710913917074495268e46,
0.00000000000000000000000000000000,
5.6920695482035280023883456219102e48,
0.00000000000000000000000000000000,
-8.2183629419784575692290653468631e50,
0.00000000000000000000000000000000,
1.2502904327166993016732339829696e53,
0.00000000000000000000000000000000,
-2.0015583233248370274925329198805e55,
0.00000000000000000000000000000000,
3.3674982915364374233396676903344e57,
0.00000000000000000000000000000000,
-5.9470970503135447718660496844035e59,
0.00000000000000000000000000000000,
1.1011910323627977559564130790444e62,
0.00000000000000000000000000000000,
-2.1355259545253501188658385019047e64,
0.00000000000000000000000000000000,
4.3328896986641192419616613059395e66,
0.00000000000000000000000000000000,
-9.1885528241669328226200555215566e68,
0.00000000000000000000000000000000,
2.0346896776329074493455027990220e71,
0.00000000000000000000000000000000,
-4.7003833958035731078575255534999e73,
0.00000000000000000000000000000000,
1.1318043445484249270675186257739e76,
0.00000000000000000000000000000000};


inline Double bernoulli(int n) {
    if(n < bernoulli_range) {
        return bernoulli_table[n];
    }
    else {
        std::cout << "Warning: the bernoulli table wasn't large enough. bernoulli(n) called with n=" << n << std::endl;
        return 0.0/0.0;
    }
}
const int two_pi_power_table_range = 100;
const Double two_pi_powers[two_pi_power_table_range] = {
1.0000000000000000000000000000000,
6.2831853071795864769252867665587,
39.478417604357434475337963999503,
248.05021344239856140381052053681,
1558.5454565440389957830453230190,
9792.6299131290065044077219213870,
61528.908388819483969934044393749,
386597.53315542938464181843111310,
2.4290639401140669458249153290000e6,
1.5262258858724460373252814029422e7,
9.5895600615509013477085890749257e7,
6.0252982881052794287246467482997e8,
3.7858065675197406667676842817872e9,
2.3786924200864017653666580066186e10,
1.4945765264186332234062848181469e11,
9.3907012712490593332031723836691e11,
5.9003516251624754097114820265771e12,
3.7073002638414060343031308141670e13,
2.3293654547071326766242033722043e14,
1.4635834800067552557347099587997e15,
9.1959662174092126844378211614099e15,
5.7779959822545403920206221679109e16,
3.6304219460644410867323547910019e17,
2.2810613830374417398369800691726e18,
1.4332331366675600748042245995428e19,
9.0052693860725256951764300574781e19,
5.6581776293765028487120411072113e20,
3.5551378546310666456348337665908e21,
2.2337589933215874535887478758812e22,
1.4035121686618462322215164135993e23,
8.8185270365838699034792917360497e23,
5.5408439507229711052911080656586e24,
3.4814149300557464720453765772125e25,
2.1874375136721913966076401503369e26,
1.3744075246278558794231531892734e27,
8.6356571648188097097126406976719e27,
5.4259434215829669731459819733188e28,
3.4092207984077830830215118525250e29,
2.1420766029486841613930391500620e30,
1.3459064238500333188276000770784e31,
8.4565794671731503132483625096064e31,
5.3134255857138914186452903580006e32,
3.3385237570949611048768510305812e33,
2.0976563418249050337566772354253e34,
1.3179963506466323586998613176694e35,
8.2812153052992347064267358623026e35,
5.2032410331846865027103377861483e36,
3.2692927609419953376973537032343e37,
2.0541572240419329354057432711742e38,
1.2906650488737079030537063912795e39,
8.1094876715735043840946606907243e39,
5.0953413786784638637250589202491e40,
3.2014974085576701632816239306593e41,
2.0115601478423074872571697796911e42,
1.2639005165430783156984647880439e43,
7.9413211552801595466969229578078e43,
4.9896792402450717820830898730336e44,
3.1351079289846837016087630131487e45,
1.9698464075818787049737443509011e46,
1.2376910005518951454968780417531e47,
7.7766419094960690355018593345134e47,
4.8862082184942704460958877762871e48,
3.0700951686263342650076785447918e49,
1.9289976855156018402325837637874e50,
1.2120249915215058100150310975917e51,
7.6153776186623881781743246335634e51,
4.7848828762203785231626672881796e52,
3.0064305784443082288954581059270e53,
1.8889960437536702657278400516100e54,
1.1868912187433428285367476769575e55,
7.4574574668286442767935901385142e55,
4.6856587184494436119967056457846e56,
2.9440862014219474866543299613230e57,
1.8498239163844541024149782340882e58,
1.1622786452296201939585284820881e59,
7.3028121065553447709729990769262e59,
4.5884921729001746945160434161130e60,
2.8830346602874912362046813627100e61,
1.8114641017607855368707041899482e62,
1.1381764628666634970155963956038e63,
7.1513736284614522856471421971054e63,
4.4933405708500564012171487738388e64,
2.8232491454919010082993304613564e65,
1.7738997549462035070366055074362e66,
1.1145740876687454858253689061339e67,
7.0030755314033539533371803896839e67,
4.4001621283982428312454944226738e68,
2.7647034034359896416438882809287e69,
1.7371143803178406775347493317053e70,
1.0914611551303428786630795698211e71,
6.8578526932722297086386075177828e71,
4.3089159281170029060904338714799e72,
2.7073717249416843867321499668610e73,
1.7010918243227044120356164050070e74,
1.0688275156747734675862782282518e75,
6.7156413423969958100723834036951e75,
4.2195619010836598603762241942156e76,
2.6512289339623615268485343192485e77,
1.6658162683841708100289481120157e78,
1.0466632301972148739796116220684e79};


inline Double two_pi_power(int n) {
    if(n < two_pi_power_table_range) {
        return two_pi_powers[n];
    }
    else {
        std::cout << "Warning: the table of powers of 2pi wasn't large enough." << std::endl;
        Double S = two_pi_powers[two_pi_power_table_range - 1];
        for(int i = two_pi_power_table_range; i <= n; i++) {
            S = S * (2.0 * PI);
        }
        return S;
    }
}
const int two_pi_over_factorial_table_range = 100;
const Double two_pi_over_factorial_table[two_pi_over_factorial_table_range] = {
1.0000000000000000000000000000000,
6.2831853071795864769252867665587,
19.739208802178717237668981999751,
41.341702240399760233968420089484,
64.939394022668291490960221792524,
81.605249276075054203397682678326,
85.456817206693727736019506102375,
76.705859753061385841630641093875,
60.244641371876660362721114310537,
42.058693944897653144986811148112,
26.426256783374397452900653314941,
15.094642576822990391826616232514,
7.9035363713184688042121034288548,
3.8199525848482821277337920673361,
1.7143907110886720654215860773219,
0.71812230177850051223174027860657,
0.28200596845579121507027017498378,
0.10422916220813984117271044898756,
0.036382841142545670771751223306422,
0.012031585942120627233202567845283,
0.0037798342006800393792225843752384,
0.0011309237482517961877702180414477,
0.00032299106720709778886255123211300,
0.000088235335992430051344844841671287,
0.000023099956945070443123599340154926,
5.8056524029499061679627827975137e-6,
1.4029996106464119443411934611213e-6,
3.2649283479971170585768247133682e-7,
7.3264820804034306286568793837868e-8,
1.5873670538243229332222957023481e-8,
3.3245737832299778900096842430129e-9,
6.7383590798145317978877915729998e-10,
1.3230737113997132701554460821934e-10,
2.5191264556915887786655631998822e-11,
4.6553348039202288772660231496229e-12,
8.3572374971409552165881964460492e-13,
1.4586131069623986434375390017548e-13,
2.4769557952772188505405136946877e-14,
4.0955716472155655890297611183869e-15,
6.5982655380220867830269570071540e-16,
1.0364531270342446194596197903105e-16,
1.5883480632590007913206746418096e-17,
2.3761631461324062238902910727994e-18,
3.4720635737769198675619659130266e-19,
4.9580951891701338801038517416747e-20,
6.9228068542647950146610441047170e-21,
9.4559300676431940906253833872452e-22,
1.2641140609943274552269481946648e-22,
1.6547214363830578890988228297691e-23,
2.1218206972565571725650903009897e-24,
2.6663585258943891079507798925977e-25,
3.2849460222691463942553434210494e-26,
3.9692162657691398667012026148263e-27,
4.7055323249243177792092372398593e-28,
5.4751354752635320980773262019763e-29,
6.2547801405442812949551949533251e-30,
7.0178469069118744901285735081434e-31,
7.7358653637797187617223322916147e-32,
8.3803233779345165025681972155253e-33,
8.9245974097714838725463394590932e-34,
9.3458165529281971170613369000045e-35,
9.6264749588449538066639268538225e-36,
9.7556332292494884148698329140964e-37,
9.7295954552783060392687346919189e-38,
9.5520080014696768549225611469295e-39,
9.2333902044455568439128454624893e-40,
8.7901669193982183121211081594877e-41,
8.2433205426296915954235244755064e-42,
7.6168103699739020983416451358645e-43,
6.9359175368395843155809125959982e-44,
6.2256650227542434831901392897378e-45,
5.5094376054072293765400288073712e-46,
4.8078913073774149805069238994379e-47,
4.1382016467164694206156735091580e-48,
3.5136605114588230423064099489336e-49,
2.9435973466686917316396087474322e-50,
2.4335746840580973108059511920610e-51,
1.9857922985452001638281462836384e-52,
1.5996283324781513573769360719904e-53,
1.2722482576677092561787966158138e-54,
9.9922144495782243364242402779150e-56,
7.7509796315774639614138652131618e-57,
5.9391269923628982828575935131953e-58,
4.4959801754082229632959866219536e-59,
3.3629853070828150583320046449402e-60,
2.4859129258498321517600595188483e-61,
1.8162152989101723498431864131047e-62,
1.3116801472169167503725812757531e-63,
9.3653743508096457775849057005071e-65,
6.6117283727240139874544290365213e-66,
4.6158571740624356952089573126984e-67,
3.1870643929789651635878498760356e-68,
2.1766213225000719067379510595292e-69,
1.4705500121318550608352273898410e-70,
9.8295087549996110220369036673988e-72,
6.5011184196007016433257019191944e-73,
4.2549720556530939922171857386315e-74,
2.7561626703648702991628121803694e-75,
1.7670898770034088710677850437859e-76,
1.1215104193589496215179742329090e-77};


inline Double two_pi_over_factorial_power(int n) {
    // return (2 pi)^n / n! using table lookup for n < 100
    if(n < two_pi_over_factorial_table_range) {
        return two_pi_over_factorial_table[n];
    }
    else {
        std::cout << "Warning: the table of (2pi)^n / n! wasn't large enough." << std::endl;
        return two_pi_power(n)/factorial(n);
    }
}
const int bernoulli_over_factorial_table_range = 100;
const Double bernoulli_over_factorial_table[bernoulli_over_factorial_table_range] = {
1.0000000000000000000000000000000,
-0.50000000000000000000000000000000,
0.083333333333333333333333333333366,
0.00000000000000000000000000000000,
-0.0013888888888888888888888888888883,
0.00000000000000000000000000000000,
0.000033068783068783068783068783068783,
0.00000000000000000000000000000000,
-8.2671957671957671957671957671972e-7,
0.00000000000000000000000000000000,
2.0876756987868098979210090321203e-8,
0.00000000000000000000000000000000,
-5.2841901386874931848476822021811e-10,
0.00000000000000000000000000000000,
1.3382536530684678832826980975126e-11,
0.00000000000000000000000000000000,
-3.3896802963225828668301953912488e-13,
0.00000000000000000000000000000000,
8.5860620562778445641359054504286e-15,
0.00000000000000000000000000000000,
-2.1748686985580618730415164238666e-16,
0.00000000000000000000000000000000,
5.5090028283602295152026526089027e-18,
0.00000000000000000000000000000000,
-1.3954464685812523340707686264067e-19,
0.00000000000000000000000000000000,
3.5347070396294674716932299778052e-21,
0.00000000000000000000000000000000,
-8.9535174270375468504026113181132e-23,
0.00000000000000000000000000000000,
2.2679524523376830603109507388687e-24,
0.00000000000000000000000000000000,
-5.7447906688722024452638819876089e-26,
0.00000000000000000000000000000000,
1.4551724756148649018662648672714e-27,
0.00000000000000000000000000000000,
-3.6859949406653101781817824799105e-29,
0.00000000000000000000000000000000,
9.3367342570950446720325551527887e-31,
0.00000000000000000000000000000000,
-2.3650224157006299345596351963707e-32,
0.00000000000000000000000000000000,
5.9906717624821343046599123968190e-34,
0.00000000000000000000000000000000,
-1.5174548844682902617108131358642e-35,
0.00000000000000000000000000000000,
3.8437581254541882322294452909886e-37,
0.00000000000000000000000000000000,
-9.7363530726466910352676212792547e-39,
0.00000000000000000000000000000000,
2.4662470442006809571064002802895e-40,
0.00000000000000000000000000000000,
-6.2470767418207436931487567947251e-42,
0.00000000000000000000000000000000,
1.5824030244644914297510817068284e-43,
0.00000000000000000000000000000000,
-4.0082736859489359685300121905202e-45,
0.00000000000000000000000000000000,
1.0153075855569556311630713945375e-46,
0.00000000000000000000000000000000,
-2.5718041582418717499248194097647e-48,
0.00000000000000000000000000000000,
6.5144560352338149315584348586386e-50,
0.00000000000000000000000000000000,
-1.6501309906896524555060987804789e-51,
0.00000000000000000000000000000000,
4.1798306285394758948501872347110e-53,
0.00000000000000000000000000000000,
-1.0587634667702908770270420242790e-54,
0.00000000000000000000000000000000,
2.6818791912607706661409848588408e-56,
0.00000000000000000000000000000000,
-6.7932793511074212095271802995323e-58,
0.00000000000000000000000000000000,
1.7207577616681404905363499407580e-59,
0.00000000000000000000000000000000,
-4.3587303293488938434001998497736e-61,
0.00000000000000000000000000000000,
1.1040792903684666750838395976445e-62,
0.00000000000000000000000000000000,
-2.7966655133781345072047937531177e-64,
0.00000000000000000000000000000000,
7.0840365016794701985093884223775e-66,
0.00000000000000000000000000000000,
-1.7944074082892240666052573093359e-67,
0.00000000000000000000000000000000,
4.5452870636110961070850791246401e-69,
0.00000000000000000000000000000000,
-1.1513346631982051812730029007859e-70,
0.00000000000000000000000000000000,
2.9163647710923613547033689800519e-72,
0.00000000000000000000000000000000,
-7.3872382634973375625733753947136e-74,
0.00000000000000000000000000000000,
1.8712093117637953062252618714076e-75,
0.00000000000000000000000000000000,
-4.7398285577617994054995634412124e-77,
0.00000000000000000000000000000000,
1.2006125993354506519817100221145e-78,
0.00000000000000000000000000000000};


inline Double bernoulli_over_factorial(int n) {
    // return B_n / n! using table lookup for n < 100
    if(n < bernoulli_over_factorial_table_range) {
        return bernoulli_over_factorial_table[n];
    }
    else {
        return 0.0/0.0;
    }
}
const int exp_t_over_N_squared_range = 22;
const Double exp_t_over_N_squared_table[exp_t_over_N_squared_range][exp_t_over_N_squared_range] = {
{-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.77880078307140486824517026697815,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.89483931681436977458143954327052,
0.64118038842995458225152047913135,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.93941306281347578611971082462262,
0.77880078307140486824517026697815,
0.56978282473092300976662968982920,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.96078943915232320943921069132293,
0.85214378896621133845634698146866,
0.69767632607103105720912926383842,
0.52729242404304855724369460856619,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.97260447711634839198877534786664,
0.89483931681436977458143954327052,
0.77880078307140486824517026697815,
0.64118038842995458225152047913135,
0.49935178859927617046915005329209,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.97979867385370436087544105933529,
0.92161044729772482842253791409518,
0.83220750069030123777523357001383,
0.72142229035475616396769189643400,
0.60037304119840444031567508036081,
0.47965226883004428947791987164660,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.98449643700540840598698882969675,
0.93941306281347578611971082462262,
0.86881505626284316673850353119120,
0.77880078307140486824517026697815,
0.67663384616172893668401461526450,
0.56978282473092300976662968982920,
0.46504318813405631303390307526896,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.98773021623561054334556462781069,
0.95181678442308926467923958808768,
0.89483931681436977458143954327052,
0.82075480829826803080352074416069,
0.73444367192973119688938259480752,
0.64118038842995458225152047913135,
0.54610813597805110965087844735670,
0.45378876851922935475400911447504,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99004983374916805357390597718039,
0.96078943915232320943921069132293,
0.91393118527122818674735354649935,
0.85214378896621133845634698146866,
0.77880078307140486824517026697815,
0.69767632607103105720912926383842,
0.61262639418441606898857996801928,
0.52729242404304855724369460856619,
0.44485806622294113448144543910580,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99176959397791978690017855283501,
0.96748258790296314037171082586875,
0.92831871219810945295461136984703,
0.87613822888907515084604488359550,
0.81333551234983870014244285840955,
0.74265723890443854645519633026537,
0.66700437245316699979431128644966,
0.58923769501588214158744766424766,
0.51200469318724326340292579621199,
0.43760163963891068180163354526986,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99307961249031601384608999080875,
0.97260447711634839198877534786664,
0.93941306281347578611971082462262,
0.89483931681436977458143954327052,
0.84062374333450531223619431070407,
0.77880078307140486824517026697815,
0.71157263624179690217888480898909,
0.64118038842995458225152047913135,
0.56978282473092300976662968982920,
0.49935178859927617046915005329209,
0.43159062049319480233049034802698,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99410031214816873241566975169385,
0.97660926631903252257982123559325,
0.94813873938794769297208707827259,
0.90966893240253574263126004599680,
0.86249235482852044311477661298787,
0.80814179137688585567621903634128,
0.74830784483927471747768916921504,
0.68475222269312247141358309521695,
0.61922292065600365634743709984746,
0.55337688789652426480640969771644,
0.48871473127476500146169642086351,
0.42653066906846219144208127374101,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99491095248707246079535920652273,
0.97979867385370436087544105933529,
0.95511992798210696436409662391596,
0.92161044729772482842253791409518,
0.88024850405056032411082772544065,
0.83220750069030123777523357001383,
0.77880078307140486824517026697815,
0.72142229035475616396769189643400,
0.66148676305748495042215675753097,
0.60037304119840444031567508036081,
0.53937353202224167014874888033760,
0.47965226883004428947791987164660,
0.42221319210210369023922281821597,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99556541748309280933401619674770,
0.98237931461817760135414056004896,
0.96078943915232320943921069132293,
0.93135840211135196879871560327769,
0.89483931681436977458143954327052,
0.85214378896621133845634698146866,
0.80430415606557221991723215611939,
0.75243215608930320761650595547288,
0.69767632607103105720912926383842,
0.64118038842995458225152047913135,
0.58404468844138289347208085289555,
0.52729242404304855724369460856619,
0.47184199249207453802517281488160,
0.41848630604256450686697711354697,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99610136947011749006286466194478,
0.98449643700540840598698882969675,
0.96545455219783783352148048122072,
0.93941306281347578611971082462262,
0.90696061788738356977984974133996,
0.86881505626284316673850353119120,
0.82579703995010065887295779061635,
0.77880078307140486824517026697815,
0.72876332991949121929780858816491,
0.67663384616172893668401461526450,
0.62334430895963437290735449671795,
0.56978282473092300976662968982920,
0.51677058277957670892641240305533,
0.46504318813405631303390307526896,
0.41523682868184128608701452970941,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99654577200700737231347261878039,
0.98625451345743557855322952846301,
0.96933804477464436873179899473786,
0.94614133172825799729520286341419,
0.91713078857794780127318927369929,
0.88287868795722079271866244816242,
0.84404440516927290294799825457692,
0.80135335473484488530143600240171,
0.75557455691749401741053074306425,
0.70749779841841717895064515187710,
0.65791132504525517992381581721311,
0.60758092899105720651391867837826,
0.55723117653049040276909222434370,
0.50752937293250720703251220711980,
0.45907269121393744422438189696763,
0.41237871165746456287628295018117,
-1.0,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99691833834393936762181422554275,
0.98773021623561054334556462781069,
0.97260447711634839198877534786664,
0.95181678442308926467923958808768,
0.92574126592438283333321966364801,
0.89483931681436977458143954327052,
0.85964602964261329596382418542168,
0.82075480829826803080352074416069,
0.77880078307140486824517026697815,
0.73444367192973119688938259480752,
0.68835072920377155130018159334481,
0.64118038842995458225152047913135,
0.59356714447103366300064486869717,
0.54610813597805110965087844735670,
0.49935178859927617046915005329209,
0.45378876851922935475400911447504,
0.40984538152519617689610460547835,
-1.0,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99723375003751528316462501443791,
0.98898082837083076020109787969313,
0.97537745660478189003225623765745,
0.95664650920126795649617022484536,
0.93309143901457581530905622993393,
0.90508810023910383279079506535706,
0.87307477663039203245345695312393,
0.83754078449884063552438673070569,
0.79901406405300150017628899787531,
0.75804819751482433470184180468708,
0.71520929746101329412336955766801,
0.67106319456936014424934990747706,
0.62616332189044253549162173907460,
0.58103964533072500902412485766141,
0.53618893032925453476156829869852,
0.49206656632250724523569472746626,
0.44908009734755804794634561737428,
0.40758453286223262760359171575158,
-1.0,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99750312239746012403687980438876,
0.99004983374916805357390597718039,
0.97775123719333636392860359013815,
0.96078943915232320943921069132293,
0.93941306281347578611971082462262,
0.91393118527122818674735354649935,
0.88470590494348355949295482402018,
0.85214378896621133845634698146866,
0.81668648259811084015380611862319,
0.77880078307140486824517026697815,
0.73896848825894424160582063429610,
0.69767632607103105720912926383842,
0.65540625432684051275766898550292,
0.61262639418441606898857996801928,
0.56978282473092300976662968982920,
0.52729242404304855724369460856619,
0.48553689515407943999160010328434,
0.44485806622294113448144543910580,
0.40555450506332055164430344455570,
-1.0,
-1.0},
{1.0000000000000000000000000000000,
0.99773499530692046499076425467614,
0.99097071625143190131333328789110,
0.97979867385370436087544105933529,
0.96436909488609146777852851834663,
0.94488756027488960808378279158742,
0.92161044729772482842253791409518,
0.89483931681436977458143954327052,
0.86491441723892053544727306244622,
0.83220750069030123777523357001383,
0.79711416294581255694367765706471,
0.76004592702346801384301865083519,
0.72142229035475616396769189643400,
0.68166294786122857682491619110143,
0.64118038842995458225152047913135,
0.60037304119840444031567508036081,
0.55961912184619265252782859190953,
0.51927129905407640629707392686570,
0.47965226883004428947791987164660,
0.44105129094155397057279646561253,
0.40372170860859766411692406237242,
-1.0}};


inline Double exp_t_over_N_squared(int t, int N) {
    if(N < exp_t_over_N_squared_range) {
        return exp_t_over_N_squared_table[N][t];
    }
    else
        return exp(-(t/(double)N)*(t/(double)N));
}
