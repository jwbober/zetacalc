#include <iostream>

const int factorial_table_range = 100;

const Double factorial_table[factorial_table_range] = {
1.0000000000000000000000000000, 1.0000000000000000000000000000, 2.0000000000000000000000000000, 6.0000000000000000000000000000, 24.000000000000000000000000000,
120.00000000000000000000000000, 720.00000000000000000000000000, 5040.0000000000000000000000000, 40320.000000000000000000000000, 362880.00000000000000000000000,
3.6288000000000000000000000000e6, 3.9916800000000000000000000000e7, 4.7900160000000000000000000000e8, 6.2270208000000000000000000000e9, 8.7178291200000000000000000000e10,
1.3076743680000000000000000000e12, 2.0922789888000000000000000000e13, 3.5568742809600000000000000000e14, 6.4023737057280000000000000000e15, 1.2164510040883200000000000000e17,
2.4329020081766400000000000000e18, 5.1090942171709440000000000000e19, 1.1240007277776076800000000000e21, 2.5852016738884976640000000000e22, 6.2044840173323943936000000000e23,
1.5511210043330985984000000000e25, 4.0329146112660563558400000000e26, 1.0888869450418352160768000000e28, 3.0488834461171386050150400000e29, 8.8417619937397019545436160000e30,
2.6525285981219105863630848000e32, 8.2228386541779228177255628800e33, 2.6313083693369353016721801216e35, 8.6833176188118864955181944013e36, 2.9523279903960414084761860964e38,
1.0333147966386144929666651338e40, 3.7199332678990121746799944815e41, 1.3763753091226345046315979582e43, 5.2302261746660111176000722410e44, 2.0397882081197443358640281740e46,
8.1591528324789773434561126960e47, 3.3452526613163807108170062053e49, 1.4050061177528798985431426062e51, 6.0415263063373835637355132069e52, 2.6582715747884487680436258110e54,
1.1962222086548019456196316150e56, 5.5026221598120889498503054288e57, 2.5862324151116818064296435515e59, 1.2413915592536072670862289047e61, 6.0828186403426756087225216332e62,
3.0414093201713378043612608166e64, 1.5511187532873822802242430165e66, 8.0658175170943878571660636856e67, 4.2748832840600255642980137534e69, 2.3084369733924138047209274268e71,
1.2696403353658275925965100848e73, 7.1099858780486345185404564746e74, 4.0526919504877216755680601905e76, 2.3505613312828785718294749105e78, 1.3868311854568983573793901972e80,
8.3209871127413901442763411832e81, 5.0758021387722479880085681218e83, 3.1469973260387937525653122355e85, 1.9826083154044400641161467084e87, 1.2688693218588416410343338934e89,
8.2476505920824706667231703068e90, 5.4434493907744306400372924025e92, 3.6471110918188685288249859097e94, 2.4800355424368305996009904186e96, 1.7112245242814131137246833888e98,
1.1978571669969891796072783722e100, 8.5047858856786231752116764424e101, 6.1234458376886086861524070385e103, 4.4701154615126843408912571381e105, 3.3078854415193864122595302822e107,
2.4809140811395398091946477117e109, 1.8854947016660502549879322609e111, 1.4518309202828586963407078409e113, 1.1324281178206297831457521159e115, 8.9461821307829752868514417154e116,
7.1569457046263802294811533723e118, 5.7971260207473679858797342316e120, 4.7536433370128417484213820699e122, 3.9455239697206586511897471180e124, 3.3142401345653532669993875791e126,
2.8171041143805502769494794423e128, 2.4227095383672732381765523203e130, 2.1077572983795277172136005187e132, 1.8548264225739843911479684565e134, 1.6507955160908461081216919262e136,
1.4857159644817614973095227336e138, 1.3520015276784029625516656876e140, 1.2438414054641307255475324326e142, 1.1567725070816415747592051623e144, 1.0873661566567430802736528526e146,
1.0329978488239059262599702099e148, 9.9167793487094968920957140154e149, 9.6192759682482119853328425950e151, 9.4268904488832477456261857431e153, 9.3326215443944152681699238856e155};

const int bernoulli_range = 100;
const Double bernoulli_table[bernoulli_range] = {1.0000000000000000000000000000000000000000000000000000000000, -0.50000000000000000000000000000000000000000000000000000000000,
0.16666666666666666666666666666666666666666666666666666666667, 0.00000000000000000000000000000000000000000000000000000000000,
-0.033333333333333333333333333333333333333333333333333333333333, 0.00000000000000000000000000000000000000000000000000000000000,
0.023809523809523809523809523809523809523809523809523809523810, 0.00000000000000000000000000000000000000000000000000000000000,
-0.033333333333333333333333333333333333333333333333333333333333, 0.00000000000000000000000000000000000000000000000000000000000,
0.075757575757575757575757575757575757575757575757575757575758, 0.00000000000000000000000000000000000000000000000000000000000,
-0.25311355311355311355311355311355311355311355311355311355311, 0.00000000000000000000000000000000000000000000000000000000000,
1.1666666666666666666666666666666666666666666666666666666667, 0.00000000000000000000000000000000000000000000000000000000000,
-7.0921568627450980392156862745098039215686274509803921568627, 0.00000000000000000000000000000000000000000000000000000000000,
54.971177944862155388471177944862155388471177944862155388471, 0.00000000000000000000000000000000000000000000000000000000000,
-529.12424242424242424242424242424242424242424242424242424242, 0.00000000000000000000000000000000000000000000000000000000000,
6192.1231884057971014492753623188405797101449275362318840580, 0.00000000000000000000000000000000000000000000000000000000000,
-86580.253113553113553113553113553113553113553113553113553114, 0.00000000000000000000000000000000000000000000000000000000000,
1.4255171666666666666666666666666666666666666666666666666667e6, 0.00000000000000000000000000000000000000000000000000000000000,
-2.7298231067816091954022988505747126436781609195402298850575e7, 0.00000000000000000000000000000000000000000000000000000000000,
6.0158087390064236838430386817483591677140064236838430386817e8, 0.00000000000000000000000000000000000000000000000000000000000,
-1.5116315767092156862745098039215686274509803921568627450980e10, 0.00000000000000000000000000000000000000000000000000000000000,
4.2961464306116666666666666666666666666666666666666666666667e11, 0.00000000000000000000000000000000000000000000000000000000000,
-1.3711655205088332772159087948561632772159087948561632772159e13, 0.00000000000000000000000000000000000000000000000000000000000,
4.8833231897359316666666666666666666666666666666666666666667e14, 0.00000000000000000000000000000000000000000000000000000000000,
-1.9296579341940068148632668144863266814486326681448632668145e16, 0.00000000000000000000000000000000000000000000000000000000000,
8.4169304757368261500055370985603543743078626799557032115172e17, 0.00000000000000000000000000000000000000000000000000000000000,
-4.0338071854059455413076811594202898550724637681159420289855e19, 0.00000000000000000000000000000000000000000000000000000000000,
2.1150748638081991605601453900709219858156028368794326241135e21, 0.00000000000000000000000000000000000000000000000000000000000,
-1.2086626522296525934602731193708252531781943546649429002370e23, 0.00000000000000000000000000000000000000000000000000000000000,
7.5008667460769643668557200757575757575757575757575757575758e24, 0.00000000000000000000000000000000000000000000000000000000000,
-5.0387781014810689141378930305220125786163522012578616352201e26, 0.00000000000000000000000000000000000000000000000000000000000,
3.6528776484818123335110430842971177944862155388471177944862e28, 0.00000000000000000000000000000000000000000000000000000000000,
-2.8498769302450882226269146432910678160919540229885057471264e30, 0.00000000000000000000000000000000000000000000000000000000000,
2.3865427499683627644645981919219214971751412429378531073446e32, 0.00000000000000000000000000000000000000000000000000000000000,
-2.1399949257225333665810744765191097392674151161723874574218e34, 0.00000000000000000000000000000000000000000000000000000000000,
2.0500975723478097569921733095672310251666666666666666666667e36, 0.00000000000000000000000000000000000000000000000000000000000,
-2.0938005911346378409095185290027970184709215686274509803922e38, 0.00000000000000000000000000000000000000000000000000000000000,
2.2752696488463515559649260352769264581469965405889805630234e40, 0.00000000000000000000000000000000000000000000000000000000000,
-2.6257710286239576047303049736158202081449000333333333333333e42, 0.00000000000000000000000000000000000000000000000000000000000,
3.2125082102718032518204792304264985243521941106167306871532e44, 0.00000000000000000000000000000000000000000000000000000000000,
-4.1598278166794710913917074495262358936689603011346470789225e46, 0.00000000000000000000000000000000000000000000000000000000000,
5.6920695482035280023883456219121058644480512971811666666667e48, 0.00000000000000000000000000000000000000000000000000000000000,
-8.2183629419784575692290653468617333014550892762886003333333e50, 0.00000000000000000000000000000000000000000000000000000000000,
1.2502904327166993016732339829702895524177196364448477501115e53, 0.00000000000000000000000000000000000000000000000000000000000,
-2.0015583233248370274925329198813298768724220132825915915207e55, 0.00000000000000000000000000000000000000000000000000000000000,
3.3674982915364374233396676903338753016219598947193843672322e57, 0.00000000000000000000000000000000000000000000000000000000000,
-5.9470970503135447718660496844051540840579071565106904990470e59, 0.00000000000000000000000000000000000000000000000000000000000,
1.1011910323627977559564130790437691604630511444223148862700e62, 0.00000000000000000000000000000000000000000000000000000000000,
-2.1355259545253501188658385019041065678973298739163469211805e64, 0.00000000000000000000000000000000000000000000000000000000000,
4.3328896986641192419616613059379206218451368511809109144987e66, 0.00000000000000000000000000000000000000000000000000000000000,
-9.1885528241669328226200555215501897138960388916271995959100e68, 0.00000000000000000000000000000000000000000000000000000000000,
2.0346896776329074493455027990220020065975140253378277023937e71, 0.00000000000000000000000000000000000000000000000000000000000,
-4.7003833958035731078575255535006060654596737369759057915140e73, 0.00000000000000000000000000000000000000000000000000000000000,
1.1318043445484249270675186257733934267890365954750747918179e76, 0.00000000000000000000000000000000000000000000000000000000000};

const int two_pi_power_table_range = 100;

const Double two_pi_powers[two_pi_power_table_range] = 
{1.0000000000000000000000000000,
6.2831853071795864769252867666,
39.478417604357434475337964000,
248.05021344239856140381052054,
1558.5454565440389957830453230,
9792.6299131290065044077219214,
61528.908388819483969934044394,
386597.53315542938464181843111,
2.4290639401140669458249153290e6,
1.5262258858724460373252814029e7,
9.5895600615509013477085890749e7,
6.0252982881052794287246467483e8,
3.7858065675197406667676842818e9,
2.3786924200864017653666580066e10,
1.4945765264186332234062848181e11,
9.3907012712490593332031723837e11,
5.9003516251624754097114820266e12,
3.7073002638414060343031308142e13,
2.3293654547071326766242033722e14,
1.4635834800067552557347099588e15,
9.1959662174092126844378211614e15,
5.7779959822545403920206221679e16,
3.6304219460644410867323547910e17,
2.2810613830374417398369800692e18,
1.4332331366675600748042245995e19,
9.0052693860725256951764300575e19,
5.6581776293765028487120411072e20,
3.5551378546310666456348337666e21,
2.2337589933215874535887478759e22,
1.4035121686618462322215164136e23,
8.8185270365838699034792917360e23,
5.5408439507229711052911080657e24,
3.4814149300557464720453765772e25,
2.1874375136721913966076401503e26,
1.3744075246278558794231531893e27,
8.6356571648188097097126406977e27,
5.4259434215829669731459819733e28,
3.4092207984077830830215118525e29,
2.1420766029486841613930391501e30,
1.3459064238500333188276000771e31,
8.4565794671731503132483625096e31,
5.3134255857138914186452903580e32,
3.3385237570949611048768510306e33,
2.0976563418249050337566772354e34,
1.3179963506466323586998613177e35,
8.2812153052992347064267358623e35,
5.2032410331846865027103377861e36,
3.2692927609419953376973537032e37,
2.0541572240419329354057432712e38,
1.2906650488737079030537063913e39,
8.1094876715735043840946606907e39,
5.0953413786784638637250589202e40,
3.2014974085576701632816239307e41,
2.0115601478423074872571697797e42,
1.2639005165430783156984647880e43,
7.9413211552801595466969229578e43,
4.9896792402450717820830898730e44,
3.1351079289846837016087630131e45,
1.9698464075818787049737443509e46,
1.2376910005518951454968780418e47,
7.7766419094960690355018593345e47,
4.8862082184942704460958877763e48,
3.0700951686263342650076785448e49,
1.9289976855156018402325837638e50,
1.2120249915215058100150310976e51,
7.6153776186623881781743246336e51,
4.7848828762203785231626672882e52,
3.0064305784443082288954581059e53,
1.8889960437536702657278400516e54,
1.1868912187433428285367476770e55,
7.4574574668286442767935901385e55,
4.6856587184494436119967056458e56,
2.9440862014219474866543299613e57,
1.8498239163844541024149782341e58,
1.1622786452296201939585284821e59,
7.3028121065553447709729990769e59,
4.5884921729001746945160434161e60,
2.8830346602874912362046813627e61,
1.8114641017607855368707041899e62,
1.1381764628666634970155963956e63,
7.1513736284614522856471421971e63,
4.4933405708500564012171487738e64,
2.8232491454919010082993304614e65,
1.7738997549462035070366055074e66,
1.1145740876687454858253689061e67,
7.0030755314033539533371803897e67,
4.4001621283982428312454944227e68,
2.7647034034359896416438882809e69,
1.7371143803178406775347493317e70,
1.0914611551303428786630795698e71,
6.8578526932722297086386075178e71,
4.3089159281170029060904338715e72,
2.7073717249416843867321499669e73,
1.7010918243227044120356164050e74,
1.0688275156747734675862782283e75,
6.7156413423969958100723834037e75,
4.2195619010836598603762241942e76,
2.6512289339623615268485343192e77,
1.6658162683841708100289481120e78,
1.0466632301972148739796116221e79};


// Array holding the values ((2 pi)^n)/n!
const Double two_pi_over_factorial_table[two_pi_power_table_range] = 
{1.0000000000000000000000000000,
6.2831853071795864769252867666,
19.739208802178717237668982000,
41.341702240399760233968420089,
64.939394022668291490960221793,
81.605249276075054203397682678,
85.456817206693727736019506102,
76.705859753061385841630641094,
60.244641371876660362721114311,
42.058693944897653144986811148,
26.426256783374397452900653315,
15.094642576822990391826616233,
7.9035363713184688042121034289,
3.8199525848482821277337920673,
1.7143907110886720654215860773,
0.71812230177850051223174027861,
0.28200596845579121507027017498,
0.10422916220813984117271044899,
0.036382841142545670771751223306,
0.012031585942120627233202567845,
0.0037798342006800393792225843752,
0.0011309237482517961877702180414,
0.00032299106720709778886255123211,
0.000088235335992430051344844841671,
0.000023099956945070443123599340155,
5.8056524029499061679627827975e-6,
1.4029996106464119443411934611e-6,
3.2649283479971170585768247134e-7,
7.3264820804034306286568793838e-8,
1.5873670538243229332222957023e-8,
3.3245737832299778900096842430e-9,
6.7383590798145317978877915730e-10,
1.3230737113997132701554460822e-10,
2.5191264556915887786655631999e-11,
4.6553348039202288772660231496e-12,
8.3572374971409552165881964460e-13,
1.4586131069623986434375390018e-13,
2.4769557952772188505405136947e-14,
4.0955716472155655890297611184e-15,
6.5982655380220867830269570072e-16,
1.0364531270342446194596197903e-16,
1.5883480632590007913206746418e-17,
2.3761631461324062238902910728e-18,
3.4720635737769198675619659130e-19,
4.9580951891701338801038517417e-20,
6.9228068542647950146610441047e-21,
9.4559300676431940906253833872e-22,
1.2641140609943274552269481947e-22,
1.6547214363830578890988228298e-23,
2.1218206972565571725650903010e-24,
2.6663585258943891079507798926e-25,
3.2849460222691463942553434210e-26,
3.9692162657691398667012026148e-27,
4.7055323249243177792092372399e-28,
5.4751354752635320980773262020e-29,
6.2547801405442812949551949533e-30,
7.0178469069118744901285735081e-31,
7.7358653637797187617223322916e-32,
8.3803233779345165025681972155e-33,
8.9245974097714838725463394591e-34,
9.3458165529281971170613369000e-35,
9.6264749588449538066639268538e-36,
9.7556332292494884148698329141e-37,
9.7295954552783060392687346919e-38,
9.5520080014696768549225611469e-39,
9.2333902044455568439128454625e-40,
8.7901669193982183121211081595e-41,
8.2433205426296915954235244755e-42,
7.6168103699739020983416451359e-43,
6.9359175368395843155809125960e-44,
6.2256650227542434831901392897e-45,
5.5094376054072293765400288074e-46,
4.8078913073774149805069238994e-47,
4.1382016467164694206156735092e-48,
3.5136605114588230423064099489e-49,
2.9435973466686917316396087474e-50,
2.4335746840580973108059511921e-51,
1.9857922985452001638281462836e-52,
1.5996283324781513573769360720e-53,
1.2722482576677092561787966158e-54,
9.9922144495782243364242402779e-56,
7.7509796315774639614138652132e-57,
5.9391269923628982828575935132e-58,
4.4959801754082229632959866220e-59,
3.3629853070828150583320046449e-60,
2.4859129258498321517600595188e-61,
1.8162152989101723498431864131e-62,
1.3116801472169167503725812758e-63,
9.3653743508096457775849057005e-65,
6.6117283727240139874544290365e-66,
4.6158571740624356952089573127e-67,
3.1870643929789651635878498760e-68,
2.1766213225000719067379510595e-69,
1.4705500121318550608352273898e-70,
9.8295087549996110220369036674e-72,
6.5011184196007016433257019192e-73,
4.2549720556530939922171857386e-74,
2.7561626703648702991628121804e-75,
1.7670898770034088710677850438e-76,
1.1215104193589496215179742329e-77};




inline Double factorial(int n) {
    if(n < factorial_table_range) {
        return factorial_table[n];
    }
    else {
        std::cout << "Warning: the factorial table wasn't large enough. factorial(n) called with n=" << n << std::endl;
        Double S = factorial_table[factorial_table_range - 1];
        for(int i = factorial_table_range; i <= n; i++) {
            S = S * i;
        }
        return S;
    }
}

inline Double binomial_coefficient(int n, int k) {
    return factorial(n)/(factorial(k) * factorial(n - k) );
}

inline Double two_pi_power(int n) {
    if(n < two_pi_power_table_range) {
        return two_pi_powers[n];
    }
    else {
        std::cout << "Warning: the table of powers of 2pi wasn't large enough." << std::endl;
        Double S = two_pi_powers[two_pi_power_table_range - 1];
        for(int i = two_pi_power_table_range; i <= n; i++) {
            S = S * (2.0 * PI);
        }
        return S;
    }
}

inline Double two_pi_over_factorial_power(int n) {
    // return (2 pi)^n / n! using table lookup for n < 100
    if(n < two_pi_power_table_range) {
        return two_pi_over_factorial_table[n];
    }
    else {
        std::cout << "Warning: the table of (2pi)^n / n! wasn't large enough." << std::endl;
        return two_pi_power(n)/factorial(n);
    }
}

